// Copyright ©2021 Dan Kortschak. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

func main() {
	f, err := os.Open("keysymdef.h")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	o, err := os.Create("keysymdef.go")
	if err != nil {
		log.Fatal(err)
	}
	defer o.Close()
	fmt.Fprint(o, `// Code generated by "go generate github.com/kortschak/hostage/cmd/xcompose"; DO NOT EDIT.

// Copyright ©2021 Dan Kortschak. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

var keysymdef = map[string]rune{
`)

	sc := bufio.NewScanner(f)
	for sc.Scan() {
		if !bytes.HasPrefix(sc.Bytes(), []byte("#define")) {
			continue
		}
		fields := strings.Fields(sc.Text())
		if len(fields) < 4 {
			continue
		}
		if strings.HasPrefix(fields[3], "/*(") {
			continue
		}
		if !strings.HasPrefix(fields[4], "U+") {
			continue
		}
		key := "<" + strings.TrimPrefix(fields[1], "XK_") + ">"
		utf, err := strconv.ParseInt(strings.TrimPrefix(fields[4], "U+"), 16, 32)
		if err != nil {
			log.Fatalf("failed to parse rune value: %s: %v", sc.Bytes(), err)
		}
		fmt.Fprintf(o, "\t%q: %q,\n", key, rune(utf))
	}
	fmt.Fprintln(o, "}")
	err = sc.Err()
	if err != nil {
		log.Fatal(err)
	}
}
